科目名: プログラミング実習III
課題: B4
番号: 37022431
氏名: 西　葵斗
作成: 2023年10月17日

----------------------------------------

[課題 4.1]

二次元配列の復習を行う。

実行結果は次の通りである. 
----------------------------------------
(1)
    A
    0.00000  1.00000  2.00000
    1.00000  2.00000  3.00000
    2.00000  3.00000  4.00000

(2)
    $ ./a
    n = 3
    [0][0] = 1
    [0][1] = 2
    [0][2] = 3
    [1][0] = 4
    [1][1] = 5
    [1][2] = 6
    [2][0] = 7
    [2][1] = 8
    [2][2] = 9
    A
    1.00000 2.00000 3.00000
    4.00000 5.00000 6.00000
    7.00000 8.00000 9.00000

(3)
    A
    3.25000 9.42000 7.34000 0.12000 5.98000
    5.73000 7.11000 8.93000 6.32000 7.12000
    8.23000 5.44000 3.12000 0.29000 4.23000
    5.42000 6.22000 2.93000 4.32000 9.22000
    7.13000 1.36000 9.34000 4.21000 4.31000
    B
    1.23000 0.34000 9.24000 6.24000 8.88000
    2.59000 0.13000 3.19000 7.36000 6.35000
    7.12000 9.44000 3.19000 0.25000 8.41000
    3.42000 9.43000 4.23000 7.99000 8.43000
    5.24000 0.23000 2.44000 9.34000 6.87000
    Y
    4.48000 9.76000 16.58000 6.36000 14.86000
    8.32000 7.24000 12.12000 13.68000 13.47000
    15.35000 14.88000 6.31000 0.54000 12.64000
    8.84000 15.65000 7.16000 12.31000 17.65000
    12.37000 1.59000 11.78000 13.55000 11.18000   

(4)
    A
    3.25000 9.42000 7.34000 0.12000 5.98000
    5.73000 7.11000 8.93000 6.32000 7.12000
    8.23000 5.44000 3.12000 0.29000 4.23000
    5.42000 6.22000 2.93000 4.32000 9.22000
    7.13000 1.36000 9.34000 4.21000 4.31000
    Y
    3.25000 5.73000 8.23000 5.42000 7.13000
    9.42000 7.11000 5.44000 6.22000 1.36000
    7.34000 8.93000 3.12000 2.93000 9.34000
    0.12000 6.32000 0.29000 4.32000 4.21000
    5.98000 7.12000 4.23000 9.22000 4.31000

(5)
    A
    3.25000 9.42000 7.34000 0.12000 5.98000
    5.73000 7.11000 8.93000 6.32000 7.12000
    8.23000 5.44000 3.12000 0.29000 4.23000
    5.42000 6.22000 2.93000 4.32000 9.22000
    7.13000 1.36000 9.34000 4.21000 4.31000
    A
    3.25000 5.73000 8.23000 5.42000 7.13000
    9.42000 7.11000 5.44000 6.22000 1.36000
    7.34000 8.93000 3.12000 2.93000 9.34000
    0.12000 6.32000 0.29000 4.32000 4.21000
    5.98000 7.12000 4.23000 9.22000 4.31000

(7)
    A
    3.25000 9.42000 7.34000 0.12000 5.98000
    5.73000 7.11000 8.93000 6.32000 7.12000
    8.23000 5.44000 3.12000 0.29000 4.23000
    5.42000 6.22000 2.93000 4.32000 9.22000
    7.13000 1.36000 9.34000 4.21000 4.31000
    x
    1.23000
    0.34000
    9.24000
    6.24000
    8.88000

    y
    128.87310
    194.64090
    80.17330
    144.68500
    160.07710
----------------------------------------


----------------------------------------

[課題 4.2]
ビットマップデータに対する画像処理のプログラムの作成


----------------------------------------
(1)
  for (i=0; i< hd->biHeight; i++) {  /* biHeight は画像の高さ */
    for (j=0; j< hd->biWidth; j++) {  /* biWidth  は画像の幅 */
      img[i][j].r = img[i][j].r*0.8;
      img[i][j].g = img[i][j].g*0.5;
      img[i][j].b = img[i][j].b*0.5;
    }
  }

(2)
    img[i][j].r = img[i][j].g = img[i][j].b;

(3)
  for (i=0; i< hd->biHeight; i++) {  /* biHeight は画像の高さ */
    for (j=0; j< hd->biWidth; j++) {  /* biWidth  は画像の幅 */
      if(((i <= 8)||(j <= 8)) || ((i >= hd->biHeight-8)||(j >= hd->biWidth-8))){
        img[i][j].r = 156;
        img[i][j].b = 128;
        img[i][j].g = 128; 
      }
    }
  }

(4)
  for (i=0; i< (hd->biHeight)/2; i++) {  /* biHeight は画像の高さ */
    for (j=0; j< hd->biWidth; j++) {  /* biWidth  は画像の幅 */
            tmp = img[i][j].r;
            img[i][j].r = img[hd->biHeight-i][j].r;
            img[hd->biHeight-i][j].r = tmp;

            tmp = img[i][j].b;
            img[i][j].b = img[hd->biHeight-i][j].b;
            img[hd->biHeight-i][j].b = tmp;

            tmp = img[i][j].g;
            img[i][j].g = img[hd->biHeight-i][j].g;
            img[hd->biHeight-i][j].g = tmp;     

    }
  }

(5)
  for (i=0; i< hd->biHeight; i += 16) {  /* biHeight は画像の高さ */
    for (j=0; j < (hd->biWidth)/2; j += 16) {  /* biWidth  は画像の幅 */
      total_b = total_g = total_r = 0;
    //16画素ごとの画素値の平均をとる  
      for(int k = 0; k < 16; k++){
        for(int s = 0; s < 16 ; s++){
          total_r += img[i+k][j+s].r; 
          total_b += img[i+k][j+s].b;
          total_g += img[i+k][j+s].g;       
        }
      }
    //各色の256の平均を取る  
      ave_r = total_r / 256;
      ave_b = total_b / 256;
      ave_g = total_g / 256;

    //求めた16×16画素をそれぞれに代入
      for (int x = 0; x < 16; x++) {
        for (int y = 0; y < 16; y++) {
          img[i+x][j+y].r = ave_r;
          img[i+x][j+y].g = ave_g;
          img[i+x][j+y].b = ave_b;
        }
      }      
    }
  }

(6)
  for (i=0; i< (hd->biHeight); i++) {  /* biHeight は画像の高さ */
    for (j=0; j< hd->biWidth; j++) {  /* biWidth  は画像の幅 */
        int ave_r = (img[2*i][j].r + img[2*i + 1][j].r) / 2;
        int ave_b = (img[2*i][j].b + img[2*i + 1][j].b) / 2;
        int ave_g = (img[2*i][j].g + img[2*i + 1][j].g) / 2;

        img[i][j].r = ave_r;
        img[i][j].g = ave_g;
        img[i][j].b = ave_b;
    }
  }
----------------------------------------
(4)は4_1でのプログラムを参考にして上下の画素を入れ替えることが出来た。最も
時間がかかったのは(5)で16×16の画素をどのように指定すると最後に平均を入れや
すいかの解決策がなかなか浮かばなかった。
----------------------------------------

[課題 4.3]
(bmp_header_t 型)と(pixel_tの2次元配列)を一つの構造体型bmp_data_tで
表すように変更する 


----------------------------------------
全体的に構造体を書き換えるだけの作業であったが、書き換えするのを忘れていても
エラー内容が出ないときがあり大変時間がかかった。
----------------------------------------

[課題 B4 の感想]
初めてC言語で画像の編集をしたので今回は特にプログラムするのが楽しかった。
前学期のメディア工学基礎で画像の編集についていろいろ学んだので別の機会に
さまざまな変更を施してみたいと思う。