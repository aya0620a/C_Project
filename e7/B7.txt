科目名: プログラミング実習III
課題: B7
番号: 37022431
氏名: 西　葵斗
作成: 2023年11月14日

----------------------------------------

[課題 7.1]

最小値を a[i] とするとき, a[k] と a[i] の値を交換する void swapminを作成

実行結果は次の通りである. 
----------------------------------------
(1)
    n = 5
    [0] : 5
    [1] : 4
    [2] : 3
    [3] : 2
    [4] : 1
    [0]    5.00000
    [1]    4.00000
    [2]    3.00000
    [3]    2.00000
    [4]    1.00000
    k = 0
    swapmin(n, a, 0)
    [0]    1.00000
    [1]    4.00000
    [2]    3.00000
    [3]    2.00000
    [4]    5.00000

(2)
    n = 5
    [0] : 5
    [1] : 4
    [2] : 3
    [3] : 1
    [4] : 2
    [0]    5.00000
    [1]    4.00000
    [2]    3.00000
    [3]    1.00000
    [4]    2.00000
    k = 1
    swapmin(n, a, 1)
    [0]    5.00000
    [1]    1.00000
    [2]    3.00000
    [3]    4.00000
    [4]    2.00000

(3)
    n = 5
    [0] : 6
    [1] : 2
    [2] : 4
    [3] : 9
    [4] : 8
    [0]    6.00000
    [1]    2.00000
    [2]    4.00000
    [3]    9.00000
    [4]    8.00000
    k = 0
    swapmin(n, a, 0)
    [0]    2.00000
    [1]    6.00000
    [2]    4.00000
    [3]    9.00000
    [4]    8.00000
    k = 1
    swapmin(n, a, 1)
    [0]    2.00000
    [1]    4.00000
    [2]    6.00000
    [3]    9.00000
    [4]    8.00000
    k = 2
    swapmin(n, a, 2)
    [0]    2.00000
    [1]    4.00000
    [2]    6.00000
    [3]    9.00000
    [4]    8.00000
    k = 3
    swapmin(n, a, 3)
    [0]    2.00000
    [1]    4.00000
    [2]    6.00000
    [3]    8.00000
    [4]    9.00000


  
----------------------------------------
入れ替えの作業でa[i]を保存しておく方法は授業で聞いたのですぐにできた。

----------------------------------------

[課題 7.2]

単純選択法を利用してvoid sortを作成する 

実行結果は次の通りである. 
----------------------------------------
(1)
    n = 5
    [0] : 1
    [1] : 2
    [2] : 3
    [3] : 4
    [4] : 5
    1.0 2.0 3.0 4.0 5.0
    n = 5
    [0] : 5
    [1] : 4
    [2] : 3
    [3] : 2
    [4] : 1
    1.0 2.0 3.0 4.0 5.0
    n = 3
    [0] : 0.3
    [1] : 0.2
    [2] : 0.1
    0.1 0.2 0.3

$ diff -Bw out.txt exp.txt
で与えられた期待と一致することを確認できた。
----------------------------------------
minの初期化を忘れていたため、毎回同じもので比較していたため、
期待した結果が得られなかった。
----------------------------------------

[課題 7.3]

void insertを作成。

実行結果は次の通りである. 
----------------------------------------
(1)
    n = 5
    [0] : 2
    [1] : 4
    [2] : 6
    [3] : 8
    [4] : 5
    [0]    2.00000
    [1]    4.00000
    [2]    6.00000
    [3]    8.00000
    [4]    5.00000
    k = 4
    insert(n, a, 4)
    [0]    2.00000
    [1]    4.00000
    [2]    5.00000
    [3]    6.00000
    [4]    8.00000

(2)
    n = 5
    [0] : 3
    [1] : 4
    [2] : 6
    [3] : 2
    [4] : 1
    [0]    3.00000
    [1]    4.00000
    [2]    6.00000
    [3]    2.00000
    [4]    1.00000
    k = 3
    insert(n, a, 3)
    [0]    2.00000
    [1]    3.00000
    [2]    4.00000
    [3]    6.00000
    [4]    1.00000

(3)
    n = 5
    [0] : 6
    [1] : 2
    [2] : 4
    [3] : 9
    [4] : 8
    [0]    6.00000
    [1]    2.00000
    [2]    4.00000
    [3]    9.00000
    [4]    8.00000
    k = 1
    insert(n, a, 1)
    [0]    2.00000
    [1]    6.00000
    [2]    4.00000
    [3]    9.00000
    [4]    8.00000
    k = 2
    insert(n, a, 2)
    [0]    2.00000
    [1]    4.00000
    [2]    6.00000
    [3]    9.00000
    [4]    8.00000
    k = 3
    insert(n, a, 3)
    [0]    2.00000
    [1]    4.00000
    [2]    6.00000
    [3]    9.00000
    [4]    8.00000
    k = 4
    insert(n, a, 4)
    [0]    2.00000
    [1]    4.00000
    [2]    6.00000
    [3]    8.00000
    [4]    9.00000



  
----------------------------------------
forを逆順で処理させればよいので簡単だった。
----------------------------------------

[課題 7.4]

ソートの時間を計算させるプログラムを作成

実行結果は次の通りである. 
----------------------------------------
$ diff -Bw out.txt exp.txt
  
----------------------------------------
前回みたいに一個のforが終了したときに初期化などがなかったため
スムーズにできた。
----------------------------------------

[課題 7.5]

素因数分解を行うプログラムを作成した. 

実行結果は次の通りである. 
----------------------------------------
(1)
    $ ./a
    乱数
    1481765933.00000
    1085377743.00000
    1270216262.00000
    1191391529.00000
    812669700.00000
    553475508.00000
    445349752.00000
    1344887256.00000
    n = 1024  cpu =    0.000000 [sec]
    n = 2048  cpu =    0.000000 [sec]
    n = 4096  cpu =    0.000000 [sec]
    n = 8192  cpu =    0.109000 [sec]
    n = 16384  cpu =    0.312000 [sec]
    n = 32768  cpu =    1.219000 [sec]
    n = 65536  cpu =    4.937000 [sec]
    正順
            0.00000
            1.00000
            2.00000
            3.00000
            4.00000
            5.00000
            6.00000
            7.00000
    n = 1024  cpu =    0.000000 [sec]
    n = 2048  cpu =    0.000000 [sec]
    n = 4096  cpu =    0.016000 [sec]
    n = 8192  cpu =    0.078000 [sec]
    n = 16384  cpu =    0.297000 [sec]
    n = 32768  cpu =    1.141000 [sec]
    n = 65536  cpu =    5.031000 [sec]
    逆順
        65535.00000
        65534.00000
        65533.00000
        65532.00000
        65531.00000
        65530.00000
        65529.00000
        65528.00000
    n = 1024  cpu =    0.000000 [sec]
    n = 2048  cpu =    0.000000 [sec]
    n = 4096  cpu =    0.031000 [sec]
    n = 8192  cpu =    0.079000 [sec]
    n = 16384  cpu =    0.343000 [sec]
    n = 32768  cpu =    1.344000 [sec]
    n = 65536  cpu =    5.375000 [sec]
(2)
    $ ./a
    乱数
    1481765933.00000
    1085377743.00000
    1270216262.00000
    1191391529.00000
    812669700.00000
    553475508.00000
    445349752.00000
    1344887256.00000
    n = 1024  cpu =    0.000000 [sec]
    n = 2048  cpu =    0.000000 [sec]
    n = 4096  cpu =    0.000000 [sec]
    n = 8192  cpu =    0.000000 [sec]
    n = 16384  cpu =    0.062000 [sec]
    n = 32768  cpu =    0.219000 [sec]
    n = 65536  cpu =    0.765000 [sec]
    正順
            0.00000
            1.00000
            2.00000
            3.00000
            4.00000
            5.00000
            6.00000
            7.00000
    n = 1024  cpu =    0.000000 [sec]
    n = 2048  cpu =    0.000000 [sec]
    n = 4096  cpu =    0.000000 [sec]
    n = 8192  cpu =    0.016000 [sec]
    n = 16384  cpu =    0.063000 [sec]
    n = 32768  cpu =    0.187000 [sec]
    n = 65536  cpu =    0.906000 [sec]
    逆順
        65535.00000
        65534.00000
        65533.00000
        65532.00000
        65531.00000
        65530.00000
        65529.00000
        65528.00000
    n = 1024  cpu =    0.000000 [sec]
    n = 2048  cpu =    0.000000 [sec]
    n = 4096  cpu =    0.000000 [sec]
    n = 8192  cpu =    0.016000 [sec]
    n = 16384  cpu =    0.062000 [sec]
    n = 32768  cpu =    0.235000 [sec]
    n = 65536  cpu =    0.906000 [sec]

  
----------------------------------------
最適化を行うと処理にかかる時間がすべてだいたい同じ割合で短縮された。
最適化をすると正順と逆順の処理時間が少し増えた。
だいたいnが二倍になるにつれ４倍の処理時間になっているように見える。
----------------------------------------

[課題 7.6]

クイックソートにより配列 a の先頭から n 個のデータのソートを行う関数を作成

実行結果は次の通りである. 
----------------------------------------
$ ./a
乱数
  1481765933.00000
  1085377743.00000
  1270216262.00000
  1191391529.00000
   812669700.00000
   553475508.00000
   445349752.00000
  1344887256.00000
n = 1024
cpu =    0.000000 [sec]
n = 2048
cpu =    0.000000 [sec]
n = 4096
cpu =    0.000000 [sec]
n = 8192
cpu =    0.000000 [sec]
n = 16384
cpu =    0.000000 [sec]
n = 32768
cpu =    0.000000 [sec]
n = 65536
cpu =    0.000000 [sec]
正順
           0.00000
           1.00000
           2.00000
           3.00000
           4.00000
           5.00000
           6.00000
           7.00000
n = 1024
cpu =    0.000000 [sec]
n = 2048
cpu =    0.000000 [sec]
n = 4096
cpu =    0.000000 [sec]
n = 8192
cpu =    0.015000 [sec]
n = 16384
cpu =    0.063000 [sec]
n = 32768
cpu =    0.250000 [sec]
n = 65536
cpu =    0.968000 [sec]
逆順
       65535.00000
       65534.00000
       65533.00000
       65532.00000
       65531.00000
       65530.00000
       65529.00000
       65528.00000
n = 1024
cpu =    0.000000 [sec]
n = 2048
cpu =    0.000000 [sec]
n = 4096
cpu =    0.000000 [sec]
n = 8192
cpu =    0.016000 [sec]
n = 16384
cpu =    0.063000 [sec]
n = 32768

nが二倍になるにつれて大体4倍になっているようにわかる。
  
----------------------------------------
lを1増やし続ける条件とrを1減らし続ける条件をif文でするとうまくいかなかった。
二重のwhileはあまり使ったことがなかったのですこし困惑した。
----------------------------------------

[課題 7.7]
文字列を並び変えるようにプログラムする


実行結果は次の通りである. 
----------------------------------------
nakamura
suzuki
tanaka
yamada
yamamoto  
----------------------------------------
問題のプログラムと自分のプログラムが違うが、strcmp(x,y)<0の部分の
記述がすぐには分からなかった。
----------------------------------------

[課題 7.8]

構造体を用いて単純選択法のプログラムを完成させる

実行結果は次の通りである. 
----------------------------------------
tanaka     20 170.00
suzuki     21 165.30
nakamura   21 175.30
yamada     22 160.50
yamamoto   22 177.40
nakamura   22 179.70
----------------------------------------
同じ年齢においての身長を比べる条件を最初に複雑に考えてしまい
なかなか期待した順番に並ばなかった。
----------------------------------------


[課題 R7 の感想]
ソートはデータ構造とアルゴリズムでならっているので理解に時間がかからなかった
が、プログラムするとなると条件がすこし複雑で難しかった。