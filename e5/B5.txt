
科目名: プログラミング実習III
課題: B5
番号: 37022431
氏名: 西　葵斗
作成: 2023年11月5日

----------------------------------------

[課題 5.1]

関数int* new_array_scanを実装

実行結果は次の通りである. 
----------------------------------------
aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_1
$ gcc -Wall array_scan.c array_scan_main.c

aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_1
$ ./a <in.txt>out.txt
n =n個の要素を入力してください
aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_1
$ diff -Bw out.txt exp.txt



11 22 33 44 55 66 77 88

----------------------------------------

----------------------------------------

[課題 5.2]

ファイルから読み込んだ数値の出現回数をカウントするプログラムを作成

実行結果は次の通りである

----------------------------------------

(1)
    1: 2
    3: 2
    4: 1

(2)
    100: 2
    200: 2
    300: 1

(3)
    2147483640: 1
    2147483641: 1


----------------------------------------
動的割り当ての仕組みをなんとなく理解したのでmallocで割り当てる
方法を覚えておきたい。
----------------------------------------

[課題 5.3]

二倍の文字列を格納する文字配列の動的割り当て

実行結果は次の通りである
----------------------------------------
aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_3
$ gcc -Wall strdouble.c strdouble_main.c

aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_3
$ ./a <in.txt>out.txt
s = s = s =
aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_3
$ diff -Bw out.txt exp.txt


abcabc
12345678901234567890
----------------------------------------
コピーを二週行うという点でforの二重構文にすることを思いついたが、
複雑に考えてしまってなかなか答えにたどり着けなかった。
----------------------------------------

[課題 5.4]

行の逆順に出力するプログラムを作成・

実行結果は次の通りである
----------------------------------------

aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_4
$ gcc -Wall linereverse.c

aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_4
$ ./a <in.txt>out.txt

aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_4
$ diff -Bw out.txt exp.txt

AHB - Abha : Saudi Arabia - Abha Airport
AES - Aalesund : Norway Vigra 
ABZ - Aberdeen : Scotland : United Kingdom Dyce 
ABR - Aberdeen : SD : USA Aberdeen Regional Airport 
ABJ - Abidjan : Cote D'ivoire Port Bouet 
ABI - Abilene : TX : USA Municipal 
AAR - Aarhus : Denmark Tirstrup 
AAL - Aalborg : Denmark Aalborg 

----------------------------------------
何度も試行錯誤して変更しても、一行目に二文表示されてしまうようになって
いたが、in.txtで改行せずに保存して入力させていただけであった。
----------------------------------------

[課題 5.5]

5_3のプログラムを書き換える。 
動的割り当てと出力をそれぞれおこなう関数の作成。

実行結果は次の通りである
----------------------------------------
aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_5
$ gcc -Wall pref1.c pref1main.c

aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_5
$ ./a > out.txt

aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_5
$ diff -Bw out.txt exp.txt


Tokyo        2187.65  12988797
Osaka        1898.01   8840372
Hyogo        8395.89   5599359

----------------------------------------
前回の中間の学習でポインタについてきちんと理解したので特に問題がなかった。
----------------------------------------

[課題 5.6]

(5-5) の pref1main.c を配列とforループを使って書き換える。

実行結果は次の通りである
----------------------------------------
aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_6
$ gcc pref1.c pre2main.c

aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_6
$ diff -Bw out.txt exp.txt

Tokyo        2187.65  12988797
Osaka        1898.01   8840372
Hyogo        8395.89   5599359

----------------------------------------
配列を使うこと以外とくに問題がなかった。
----------------------------------------

[課題 5.7]

pref_t型の変数をつかって逆順に表示させるプログラムを作成する。

実行結果は次の通りである
----------------------------------------
aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_7
$ diff -Bw out.txt exp.txt

Mie          5777.22   1862575
Wakayama     4726.29   1005710
Shiga        4017.36   1402132
Nara         3691.09   1400951
Kyoto        4613.13   2631441
Hyogo        8395.89   5599359
Osaka        1898.01   8840372
Tokyo        2187.65  12988797

----------------------------------------
逆順にするときのforループでどこから開始するかに迷ってしまっていた。
標準入力の関数で引数を無しにするとうまく組み立てられた。
----------------------------------------

[課題 5.8]

整数型のスタックを実装する次の関数群を作成しistack.c に格納


実行結果は次の通りである
----------------------------------------

(1)
    $ ./a
    (size = 8, sp = 0, data = [ ])

(2)
    $ ./a
    (size = 4, sp = 0, data = [ ])
    (size = 4, sp = 2, data = [ 5 6 ])
    (size = 4, sp = 4, data = [ 5 6 2 8 ])
    (size = 4, sp = 4, data = [ 5 6 2 8 ])

(3)
    $ ./a
    (size = 4, sp = 4, data = [ 5 6 2 8 ])
    d = 8
    (size = 4, sp = 3, data = [ 5 6 2 ])
    d = 2
    d = 6
    d = 5
    (size = 4, sp = 0, data = [ ])
    d = 0
    (size = 4, sp = 0, data = [ ])

(4)
    $ ./a
    (size = 4, sp = 0, data = [ ])
    empty = 1, full = 0
    (size = 4, sp = 2, data = [ 5 6 ])
    empty = 0, full = 0
    (size = 4, sp = 4, data = [ 5 6 2 8 ])
    empty = 0, full = 1
    (size = 4, sp = 2, data = [ 5 6 ])
    empty = 0, full = 0
    (size = 4, sp = 0, data = [ ])
    empty = 1, full = 0

(5)
    $ ./a
    (size = 4, sp = 4, data = [ 5 6 2 8 ])
    (size = 8, sp = 6, data = [ 5 6 2 8 2 8 ])

(6)
    aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_8
    $ gcc istack.c istacktest.c

    aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_8
    $ ./a > out.txt

    aotom@2525-Aoto-Surface-Laptop4 ~/pro3/e5/5_8
    $ diff -Bw out.txt exp.txt


----------------------------------------
istack_popでデータを削除するときにセットした後に減少させていたので
最初はdの値が合わなかった。

----------------------------------------


[課題 B5 の感想]
動的割り当てをする理由はなんとなくは理解できたが、詳しい仕組みについては
きちんと理解していないので復習しておきたい。


面白かった/苦労した, etc. 
構造体やポインタは使えるようになったが配列で文字列など、出力するときなどに
どこまでを範囲とするのかを考えるのが苦手。